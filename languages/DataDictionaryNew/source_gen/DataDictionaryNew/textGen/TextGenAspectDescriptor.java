package DataDictionaryNew.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;
import jetbrains.mps.text.rt.TextGenModelOutline;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final long[] myId2Index;
  public TextGenAspectDescriptor() {
    myId2Index = new long[6];
    myId2Index[0] = 0x4709666cc5e01970L;
    myId2Index[1] = 0x4709666cc5e0197fL;
    myId2Index[2] = 0x4709666cc5e01982L;
    myId2Index[3] = 0x62cd8899af6d0936L;
    myId2Index[4] = 0x62cd8899af7681e1L;
    myId2Index[5] = 0x62cd8899af79708bL;
  }
  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SConceptId id) {
    final int index = Arrays.binarySearch(myId2Index, id.getIdValue());
    switch (index) {
      case 0:
        return new Restriction_TextGen();
      case 1:
        return new PredefinedDomain_TextGen();
      case 2:
        return new UserDefinedDomain_TextGen();
      case 3:
        return new Aggregation_TextGen();
      case 4:
        return new SetOfComponentsAsAField_TextGen();
      case 5:
        return new StructureAsAField_TextGen();
      default:
        return null;
    }
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
  }
}
